/*
 * This file is generated by jOOQ.
 */
package top.oatnil.dbmlfromjooq.demo.generated.tables


import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row3
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl

import top.oatnil.dbmlfromjooq.demo.generated.DefaultSchema
import top.oatnil.dbmlfromjooq.demo.generated.keys.COUNTRY_PKEY
import top.oatnil.dbmlfromjooq.demo.generated.tables.records.CountryRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Country(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, CountryRecord>?,
    aliased: Table<CountryRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<CountryRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>country</code>
         */
        val COUNTRY: Country = Country()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CountryRecord> = CountryRecord::class.java

    /**
     * The column <code>country.country_id</code>.
     */
    val COUNTRY_ID: TableField<CountryRecord, Int?> = createField(DSL.name("country_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>country.country</code>.
     */
    val COUNTRY_: TableField<CountryRecord, String?> = createField(DSL.name("country"), SQLDataType.VARCHAR(50).nullable(false), this, "")

    /**
     * The column <code>country.last_update</code>.
     */
    val LAST_UPDATE: TableField<CountryRecord, LocalDateTime?> = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<CountryRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<CountryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>country</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>country</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>country</code> table reference
     */
    constructor(): this(DSL.name("country"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, CountryRecord>): this(Internal.createPathAlias(child, key), child, key, COUNTRY, null)
    override fun getSchema(): Schema? = if (aliased()) null else DefaultSchema.DEFAULT_SCHEMA
    override fun getIdentity(): Identity<CountryRecord, Int?> = super.getIdentity() as Identity<CountryRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<CountryRecord> = COUNTRY_PKEY
    override fun `as`(alias: String): Country = Country(DSL.name(alias), this)
    override fun `as`(alias: Name): Country = Country(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Country = Country(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Country = Country(name, null)

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row3<Int?, String?, LocalDateTime?> = super.fieldsRow() as Row3<Int?, String?, LocalDateTime?>
}
