/*
 * This file is generated by jOOQ.
 */
package top.oatnil.dbmlfromjooq.demo.generated


import java.math.BigDecimal

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Configuration
import org.jooq.Domain
import org.jooq.Field
import org.jooq.Result
import org.jooq.Table
import org.jooq.impl.SchemaImpl

import top.oatnil.dbmlfromjooq.demo.generated.domains.YEAR
import top.oatnil.dbmlfromjooq.demo.generated.tables.Actor
import top.oatnil.dbmlfromjooq.demo.generated.tables.ActorInfo
import top.oatnil.dbmlfromjooq.demo.generated.tables.Address
import top.oatnil.dbmlfromjooq.demo.generated.tables.Category
import top.oatnil.dbmlfromjooq.demo.generated.tables.City
import top.oatnil.dbmlfromjooq.demo.generated.tables.Country
import top.oatnil.dbmlfromjooq.demo.generated.tables.Customer
import top.oatnil.dbmlfromjooq.demo.generated.tables.CustomerList
import top.oatnil.dbmlfromjooq.demo.generated.tables.Film
import top.oatnil.dbmlfromjooq.demo.generated.tables.FilmActor
import top.oatnil.dbmlfromjooq.demo.generated.tables.FilmCategory
import top.oatnil.dbmlfromjooq.demo.generated.tables.FilmInStock
import top.oatnil.dbmlfromjooq.demo.generated.tables.FilmList
import top.oatnil.dbmlfromjooq.demo.generated.tables.FilmNotInStock
import top.oatnil.dbmlfromjooq.demo.generated.tables.Inventory
import top.oatnil.dbmlfromjooq.demo.generated.tables.Language
import top.oatnil.dbmlfromjooq.demo.generated.tables.NicerButSlowerFilmList
import top.oatnil.dbmlfromjooq.demo.generated.tables.Payment
import top.oatnil.dbmlfromjooq.demo.generated.tables.Rental
import top.oatnil.dbmlfromjooq.demo.generated.tables.RewardsReport
import top.oatnil.dbmlfromjooq.demo.generated.tables.SalesByFilmCategory
import top.oatnil.dbmlfromjooq.demo.generated.tables.SalesByStore
import top.oatnil.dbmlfromjooq.demo.generated.tables.Staff
import top.oatnil.dbmlfromjooq.demo.generated.tables.StaffList
import top.oatnil.dbmlfromjooq.demo.generated.tables.Store
import top.oatnil.dbmlfromjooq.demo.generated.tables.records.FilmInStockRecord
import top.oatnil.dbmlfromjooq.demo.generated.tables.records.FilmNotInStockRecord
import top.oatnil.dbmlfromjooq.demo.generated.tables.records.RewardsReportRecord


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class DefaultSchema : SchemaImpl("", DefaultCatalog.DEFAULT_CATALOG) {
    public companion object {

        /**
         * The reference instance of <code>DEFAULT_SCHEMA</code>
         */
        val DEFAULT_SCHEMA: DefaultSchema = DefaultSchema()
    }

    /**
     * The table <code>actor</code>.
     */
    val ACTOR: Actor get() = Actor.ACTOR

    /**
     * The table <code>actor_info</code>.
     */
    val ACTOR_INFO: ActorInfo get() = ActorInfo.ACTOR_INFO

    /**
     * The table <code>address</code>.
     */
    val ADDRESS: Address get() = Address.ADDRESS

    /**
     * The table <code>category</code>.
     */
    val CATEGORY: Category get() = Category.CATEGORY

    /**
     * The table <code>city</code>.
     */
    val CITY: City get() = City.CITY

    /**
     * The table <code>country</code>.
     */
    val COUNTRY: Country get() = Country.COUNTRY

    /**
     * The table <code>customer</code>.
     */
    val CUSTOMER: Customer get() = Customer.CUSTOMER

    /**
     * The table <code>customer_list</code>.
     */
    val CUSTOMER_LIST: CustomerList get() = CustomerList.CUSTOMER_LIST

    /**
     * The table <code>film</code>.
     */
    val FILM: Film get() = Film.FILM

    /**
     * The table <code>film_actor</code>.
     */
    val FILM_ACTOR: FilmActor get() = FilmActor.FILM_ACTOR

    /**
     * The table <code>film_category</code>.
     */
    val FILM_CATEGORY: FilmCategory get() = FilmCategory.FILM_CATEGORY

    /**
     * The table <code>film_in_stock</code>.
     */
    val FILM_IN_STOCK: FilmInStock get() = FilmInStock.FILM_IN_STOCK

    /**
     * Call <code>film_in_stock</code>.
     */
    fun FILM_IN_STOCK(
          configuration: Configuration
        , pFilmId: Int?
        , pStoreId: Int?
    ): Result<FilmInStockRecord> = configuration.dsl().selectFrom(top.oatnil.dbmlfromjooq.demo.generated.tables.FilmInStock.FILM_IN_STOCK.call(
          pFilmId
        , pStoreId
    )).fetch()

    /**
     * Get <code>film_in_stock</code> as a table.
     */
    fun FILM_IN_STOCK(
          pFilmId: Int?
        , pStoreId: Int?
    ): FilmInStock = top.oatnil.dbmlfromjooq.demo.generated.tables.FilmInStock.FILM_IN_STOCK.call(
        pFilmId,
        pStoreId
    )

    /**
     * Get <code>film_in_stock</code> as a table.
     */
    fun FILM_IN_STOCK(
          pFilmId: Field<Int?>
        , pStoreId: Field<Int?>
    ): FilmInStock = top.oatnil.dbmlfromjooq.demo.generated.tables.FilmInStock.FILM_IN_STOCK.call(
        pFilmId,
        pStoreId
    )

    /**
     * The table <code>film_list</code>.
     */
    val FILM_LIST: FilmList get() = FilmList.FILM_LIST

    /**
     * The table <code>film_not_in_stock</code>.
     */
    val FILM_NOT_IN_STOCK: FilmNotInStock get() = FilmNotInStock.FILM_NOT_IN_STOCK

    /**
     * Call <code>film_not_in_stock</code>.
     */
    fun FILM_NOT_IN_STOCK(
          configuration: Configuration
        , pFilmId: Int?
        , pStoreId: Int?
    ): Result<FilmNotInStockRecord> = configuration.dsl().selectFrom(top.oatnil.dbmlfromjooq.demo.generated.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
          pFilmId
        , pStoreId
    )).fetch()

    /**
     * Get <code>film_not_in_stock</code> as a table.
     */
    fun FILM_NOT_IN_STOCK(
          pFilmId: Int?
        , pStoreId: Int?
    ): FilmNotInStock = top.oatnil.dbmlfromjooq.demo.generated.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
        pFilmId,
        pStoreId
    )

    /**
     * Get <code>film_not_in_stock</code> as a table.
     */
    fun FILM_NOT_IN_STOCK(
          pFilmId: Field<Int?>
        , pStoreId: Field<Int?>
    ): FilmNotInStock = top.oatnil.dbmlfromjooq.demo.generated.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
        pFilmId,
        pStoreId
    )

    /**
     * The table <code>inventory</code>.
     */
    val INVENTORY: Inventory get() = Inventory.INVENTORY

    /**
     * The table <code>language</code>.
     */
    val LANGUAGE: Language get() = Language.LANGUAGE

    /**
     * The table <code>nicer_but_slower_film_list</code>.
     */
    val NICER_BUT_SLOWER_FILM_LIST: NicerButSlowerFilmList get() = NicerButSlowerFilmList.NICER_BUT_SLOWER_FILM_LIST

    /**
     * The table <code>payment</code>.
     */
    val PAYMENT: Payment get() = Payment.PAYMENT

    /**
     * The table <code>rental</code>.
     */
    val RENTAL: Rental get() = Rental.RENTAL

    /**
     * The table <code>rewards_report</code>.
     */
    val REWARDS_REPORT: RewardsReport get() = RewardsReport.REWARDS_REPORT

    /**
     * Call <code>rewards_report</code>.
     */
    fun REWARDS_REPORT(
          configuration: Configuration
        , minMonthlyPurchases: Int?
        , minDollarAmountPurchased: BigDecimal?
    ): Result<RewardsReportRecord> = configuration.dsl().selectFrom(top.oatnil.dbmlfromjooq.demo.generated.tables.RewardsReport.REWARDS_REPORT.call(
          minMonthlyPurchases
        , minDollarAmountPurchased
    )).fetch()

    /**
     * Get <code>rewards_report</code> as a table.
     */
    fun REWARDS_REPORT(
          minMonthlyPurchases: Int?
        , minDollarAmountPurchased: BigDecimal?
    ): RewardsReport = top.oatnil.dbmlfromjooq.demo.generated.tables.RewardsReport.REWARDS_REPORT.call(
        minMonthlyPurchases,
        minDollarAmountPurchased
    )

    /**
     * Get <code>rewards_report</code> as a table.
     */
    fun REWARDS_REPORT(
          minMonthlyPurchases: Field<Int?>
        , minDollarAmountPurchased: Field<BigDecimal?>
    ): RewardsReport = top.oatnil.dbmlfromjooq.demo.generated.tables.RewardsReport.REWARDS_REPORT.call(
        minMonthlyPurchases,
        minDollarAmountPurchased
    )

    /**
     * The table <code>sales_by_film_category</code>.
     */
    val SALES_BY_FILM_CATEGORY: SalesByFilmCategory get() = SalesByFilmCategory.SALES_BY_FILM_CATEGORY

    /**
     * The table <code>sales_by_store</code>.
     */
    val SALES_BY_STORE: SalesByStore get() = SalesByStore.SALES_BY_STORE

    /**
     * The table <code>staff</code>.
     */
    val STAFF: Staff get() = Staff.STAFF

    /**
     * The table <code>staff_list</code>.
     */
    val STAFF_LIST: StaffList get() = StaffList.STAFF_LIST

    /**
     * The table <code>store</code>.
     */
    val STORE: Store get() = Store.STORE

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getDomains(): List<Domain<*>> = listOf(
        YEAR
    )

    override fun getTables(): List<Table<*>> = listOf(
        Actor.ACTOR,
        ActorInfo.ACTOR_INFO,
        Address.ADDRESS,
        Category.CATEGORY,
        City.CITY,
        Country.COUNTRY,
        Customer.CUSTOMER,
        CustomerList.CUSTOMER_LIST,
        Film.FILM,
        FilmActor.FILM_ACTOR,
        FilmCategory.FILM_CATEGORY,
        FilmInStock.FILM_IN_STOCK,
        FilmList.FILM_LIST,
        FilmNotInStock.FILM_NOT_IN_STOCK,
        Inventory.INVENTORY,
        Language.LANGUAGE,
        NicerButSlowerFilmList.NICER_BUT_SLOWER_FILM_LIST,
        Payment.PAYMENT,
        Rental.RENTAL,
        RewardsReport.REWARDS_REPORT,
        SalesByFilmCategory.SALES_BY_FILM_CATEGORY,
        SalesByStore.SALES_BY_STORE,
        Staff.STAFF,
        StaffList.STAFF_LIST,
        Store.STORE
    )
}
